% Programmed by Chanwoo Kim% Version 0.01 Addition of the start and the end time %% Only 16 kHz is currently supported% % SpecViewer szFileName iFeatLen [dStartTime] [dEndTime] %% dStartTime : any double point numbers%		If start is used for this value, then it begins from the %	        beginning of the sentence%%		Not implemented yet%% dEndTime%%	Version 0.01 Chanwoo Kim% 	Future plan: PC version? /MFC version? function [aafFeat] = SpecViewer(szFileName, iFeatLen1, iFeatLen2, dStartTime, dEndTime)if (nargin ~= 2 & nargin ~= 3 & nargin ~= 4 & nargin ~= 5)	'Usage : SpecViewer szFileName iFeatLen1 [Optional iFeatLen2 (should be 0 when you do not use this one)] [dStartTime [START]] [dEndTime[END]]' 		return;endiSamplingRate = 16000;%szFileName = '/usr2/chanwook/AN_MODEL_RECOG/SPHINX3/AN_FEAT/TRA_CB00_30DCT/adg0_4/sr009.anfeat';fid = fopen(szFileName, 'rb');if (fid <= 0)	'Incorrect file name'	return;endiFeatLen1 = str2num(iFeatLen1);iFeatLen2 = str2num(iFeatLen2);iFeatLen  = iFeatLen1 + iFeatLen2;fseek(fid, 4, 'bof'); % Skip the header part  -- To be compatible with the SPHINX format aafFeat = fread(fid, [iFeatLen, inf], 'float32',0, 'ieee-be');[M, N]    = size(aafFeat)iEndIndex = N - 1;iEndIndexif (nargin == 2 || nargin == 3)	dStartTime  = 0.0;	dEndTime    = iEndIndex * 0.01;	iStartIndex = 0;	iEndIndex   = N - 1; endif (nargin == 5)	dStartTime = str2double(dStartTime);	dEndTime   = str2double(dEndTime);		iStartIndex = round(dStartTime * iSamplingRate / 100);	if (iStartIndex < 0)		iStartIndex = 0;	end	iEndIndexTemp   = round(dEndTime * iSamplingRate / 100);	if (iEndIndexTemp > iEndIndex)		'Warning : Speech length is shorther than your end time input'		'It has been set to the end of the speech sample' 	else		iEndIndex = iEndIndexTemp;	endendiStartIndexiEndIndexfclose(fid);iNumFrames = length(aafFeat) / iFeatLen;figure[M N] = size(aafFeat)for i = 1 : M    aafFeat(i, :) = (aafFeat(i, :) - mean(aafFeat(i, :)));% / std(aafFeat(i, :));endX = [idct(aafFeat( 1 : iFeatLen1, iStartIndex + 1:iEndIndex + 1), M * iFeatLen1)      idct(aafFeat( iFeatLen1 + 1 : iFeatLen1 + iFeatLen2, iStartIndex + 1:iEndIndex + 1), M* iFeatLen2)];imagesc([dStartTime, dEndTime], [0 M], X);axis xy;grid on;xlabel('Time (s)')ylabel('Index')